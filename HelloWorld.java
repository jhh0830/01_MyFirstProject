//주석 : 소스코드 내에 해당 소스코드에 대한 설명을 기술할 때 주로 사용 
//소스코드와 무관한 부분(즉, 코드로 인식되지 않는 부분임)
// 한줄짜리 주석

/*
 * 여러줄 
 * 짜리
 * 주석
 */
package com.kh.first;
//패키지 선언부 : 이 클래스가 위치한 패키지 경로를 나타냄
// 실제 폴더 경로와 항상 일치해야 함


// 클래스 선언부 : 클래스의 이름이 명시되어있음
// 중괄호 ({}) 로 영역 표시 되어있음!!
// 이 클래스의 : HelloWorld
// 이 클래스의 풀 네임 : com.kr.first.HelloWorld
public class HelloWorld { // HelloWorld 클래스 영역 시작
	
	// 들여쓰기 주의!!(키보드의 tab 키)
	/*
	 *  Class 
	 *  유사한 특징을 지닌 변수와 메소드들을 묶어놓은 집합체
	 *  - 변수 : 값을 보관할 수 있는 공간
	 *  - 메소드 : 하나의 기능 단위를 나타내는 코드 블럭
	 *  (항상 코드는 메소드 내부에 적어야한다!!)
	 *  
	 *  Method (메소드)
	 *  사전적으로 "기능" 을 의미함
	 *  하나의 기능 단위
	 *  한개의 클래스 내에 여러 메소드 작성 가능
	 *  한개의 클래스 내에 여러 메소드의 이름은 원칙적으로 중복 불가
	 *  (오버 로딩이라는 규칙을 적용하면 중복은 가능..> 2주 후에 다를 것)
	 *  메소드는 크게 main 메소드와 일반 메소드로 나뉜다.
	 *  - main 메소드 : 이 프로그램의 시작점(Entry Point)를 나타냄
	 *  - 일반 메소드 : main이 아닌 모든 메소드를 나타냄
	 *  메소드를 한번 정의 후 "호출" 을 통해 해당 코드들을 실행할 수 있음
	 *  
	 */
	
	// 항상 메소드는 클래스 영역 안쪽에 작성해야함!!
	// main 메소드 : 프로그램의 시작점을 나타내는 메소드
	// > 프로그램 당 적어도 1개 이상은 갖고 있어야 함
	
	public static void main(String[] args){// main 메소드 영역 시작
		
		// *출력문
		// Console 창에 텍스트를 출력해주는 용도의 문법
		System.out.println("Hi everyone!");
		
		
		System.out.print("안녕하세요"); // ; : 마침표
		// > println : 콘솔창에 텍스트를 출력 후 "줄바꿈 (개행)"이 일어남
		System.out.print("여러분~");
		
		System.out.print("\"반\t가\t워\"\t요\\t^^\n"); // \n : 개행문자
		// \n
		// > print : 콘솔창에 텍스트를 출력만 하는 역할 (줄바꿈 X)
		// \n 과 같이 \ 로 시작하는 문자들은 "이스케이프 문자"라고 한다.
		//(엔터키를 쳐준다든지 동의 특수한 역할을 하는 문자들)
		// \n : 개행 (줄바꿈)
		// \t : tab 키를 눌러주는 효과
		// \\ : \ 기호 자체를 나타내는 문자
		// \" : 쌍따옴표를 출력 할 때 사용
		// \' : 홑따옴표를 출력 할 때 사용
		
		//System.out.println();
		// > 출력할 내용은 없지만 개행은 하겠다.
		
		
		System.out.println("안녕히계세요~~");
		
		int today;
		today = 20240710;
		System.out.println("Hello World" +"  "+ today);
		
		
			
			
			
			}// main 메소드 영역 끝
	
	
}// HelloWorld 클래스 영역 끝
/* * 자바 프로그래밍 순서
 * 1. Workspace : 작업 공간 폴더
 * 2. Project : 프로그램 한개 단위를 나타내는 폴더
 * (하나의 Workspace 폴더 안에 여러개의 Project 생성 가능)
 * 3. Package : Project 내 src 폴더 안쪽에 존재하는
 * "소스코드들을 보관하는 폴더"
 * - 패키지 생성 시 주의사항
 * 한 패키지 내에 동일한 이름의 클래스들은 생성 불가(이름 중복 불가)
 * 서로 다른 패키지 내에 동일한 이름의 클래스들은 생성 가능
 * 기본 패키지에 클래스를 만들 수는 있으나 권장하지 않음
 * 왜? 모든 클래스들을 그냥 기본패키지에 몰아 넣으면 관리하기가 힘들어짐
 * (카테고리별로 분류를 해서 코드를 관리해야 나중에 유지보수 시 편함)
 * 왜? 기본 패키지에 만들어진 클래스들은 나중에 다른 
 * 패키지의 클래스에서 가져다 쓸 수 없음(가장 큰 이유)
 * - 패키지 생성시 권장사항
 * 패키지는 적어도 세단계 이상으로 만들어주는 것을 권장
 * 패키지명은 모두 소문자로 적어주기
 * (클래스의 풀 네임을 봤을 때 어디까지가 패키지 위치인지를 한눈에 구분 가능하기 떄문)
 * 패키지명의 두번째 레벨까지는 보통 "도메인 주소"의 역순으로 적는다.
 * 예) com.kh.first
 * (도메인 주소라는 것은 고유한 이름이기 떄문에 중복을 방지 할 수 있고,
 * 패키지 명만 봐도 어느 회사에서 제작한 프로그램인지 금방 파악 가능)
 * 4. Class : .java 파일 한개 단위
 * "소스코드의 최소 단위"
 * {모든 코드는 반드시 class 안에 작성해야 한다)
 *  
 * 
 * */

/*
 *  * 자바의 명명 규칙
 *  - Project 명 또는 Package 명 또는 Class 명 또는 Method명
 *  명을 짓는 것은 내 마음대로지만 왠만해서는 명명 규칙을 지켜주는 것이 좋다.
 *  1. 영어 사용
 *  2. 띄어쓰기 불가
 *  3. 의미 부여를 해서 여러 단어를 조합해서 만든다.
 *  예) 01_MyFirstProject, HelloWorld 등
 *  4. 패키지명은 소문자로 적는다. 패키지랑 클래스 구별을 위해
 *  5. 클래스명의 첫글자는 대문자로 시작한다.
 *  (풀 클래스 명을 봤을 떄 한번에 구분하기 위함)
 *  6. 메소드명의 첫글자는 소문자로 시작한다. public static void main() 
 *  7. 변수명의 첫글자도 소문자로 시작한다.
 * 	8. 공통 원칙 : 여러개의 단어를 조합해서 이름을 지을 경우에는
 * 	띄어쓰기 대신에 각 단어별로 첫글자는 대문자로 적어서 가독성을 높혀준다.
 * 	예) 클래스명 : methodTest (X) --> MethodTest (O)
 *	    메소드명 : TestPrint (X) --> testPrint (O) 
 * 	- 낙타 표기법 (낙타봉 표기법), Camel Case 이라고 부름
 */



 